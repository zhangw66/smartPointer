如何实现一个简单的智能指针呢？<引用计数>.
思考:
智能指针解决的就是野指针,空指针,内存泄漏这样的问题.

智能指针核心理念?这块内存什么时候需要,什么时候不需要?
没有指针指向该内存的时候,它就可以被释放了.那指针怎么不指向一块内存:指针变量被销毁(局部变量的生命周期) 指针被nullptr赋值.

引用计数应该谁拥有?
1-sp类拥有 2-被指的object对象拥有
情况1:指针之间需要共享这个计数,这是需要同步这个数值的,明显不可取.或者解决这个同步的问题也可以.c++ sharedptr就是这样.
情况2:object保留一份,只操作这一个.可以采用.

/*
    列举下我们使用指针的几种方法,我们的指针类就要重载这些符号
*/
int a = 3;
int *pa = null;
pa = &a;
*pa = 4;
int *pb = pa;


安卓中的强弱指针什么意思?
android里边的sp是指strong pointer,wp是指weak pointer.
我们在实现智能指针的时候,借鉴的是strong_pointer的理念,.但是sp是有bug的.
也不能说bug.就是只要内存有指针指.这片内存就不能释放,这也是sp的"强"称号的由来.
循环引用问题.
那这样的话有些情况还是会出现内存泄漏,此时引入了弱指针的概念.
理解弱指针,只需要理解两个概念:
1-使用弱指针之前必须先升级为强指针,这里使用这个概念值得商榷.
2-只要对象的强引用计数为0,该对象即可释放,不管此时对象有没有弱引用.

讨论下不同规则下对删除目标对象时机的规则.
当sp不再指向一块内存时,会调用:
template<typename T>
sp<T>::~sp() {
    if (m_ptr)	//m_ptr指向目标对象,该对象必须继承RefBase
        m_ptr->decStrong(this);	//减小引用计数.
}

void RefBase::decStrong(const void* id) const
{
    weakref_impl* const refs = mRefs; //获得计数器
    refs->removeStrongRef(id);
    const int32_t c = android_atomic_dec(&refs->mStrong);	//减少强引用计数
    if (c == 1) {
        refs->mBase->onLastStrongRef(id);
        if ((refs->mFlags&OBJECT_LIFETIME_MASK) == OBJECT_LIFETIME_STRONG) {
            delete this;	//删除RefBase,同时会删除目标对象,因为目标对象继承RefBase,且RefBase析构函数是virtual
        }
    }
    refs->decWeak(id);
}
至此sp类 目标对象 refbase类都已经清理.此时还有一个类需要清除,即weakref_type和weakref_impl
weakref_impl是继承weakref_type的,delete weakref_impl应该就可以了,这部分代码在RefBase的析构函数中.
RefBase::~RefBase()
{
    if (mRefs->mStrong == INITIAL_STRONG_VALUE) {
        // we never acquired a strong (and/or weak) reference on this object.
        delete mRefs;
    } else {
        // life-time of this object is extended to WEAK or FOREVER, in
        // which case weakref_impl doesn't out-live the object and we
        // can free it now.
        if ((mRefs->mFlags & OBJECT_LIFETIME_MASK) != OBJECT_LIFETIME_STRONG) {
            // It's possible that the weak count is not 0 if the object
            // re-acquired a weak reference in its destructor
            if (mRefs->mWeak == 0) {
                delete mRefs;
            }
        }
    }
    // for debugging purposes, clear this.
    const_cast<weakref_impl*&>(mRefs) = NULL;
}

至此.所有类型均被清理.